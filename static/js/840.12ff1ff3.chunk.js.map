{"version":3,"file":"static/js/840.12ff1ff3.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/ContactForm.module.css?b5b2","../node_modules/nanoid/index.browser.js","components/ContactForm/ContactForm.jsx","webpack://goit-react-hw-08-phonebook/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactList/ContactList.module.css?1ce0","webpack://goit-react-hw-08-phonebook/./src/components/ContactListItem/ContactListItem.module.css?7127","components/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.jsx","webpack://goit-react-hw-08-phonebook/./src/components/pages/ContactsPage/ContactsPage.module.css?c85d","components/pages/ContactsPage/ContactsPage.jsx","redux/selectors.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"formContact\":\"ContactForm_formContact__CkY07\",\"formName\":\"ContactForm_formName__9bHzl\",\"formNumber\":\"ContactForm_formNumber__UMrmC\",\"buttonAdd\":\"ContactForm_buttonAdd__Mr+ls\"};","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import React, { useState } from 'react';\nimport css from './ContactForm.module.css';\nimport { nanoid } from 'nanoid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from '../../redux/selectors';\nimport { addContact } from '../../redux/operation';\n\nexport function ContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleInputChange = event => {\n    const { name, value } = event.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        break;\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const addContacts = contact => {\n      if (\n        contacts.some(\n          contactItem => contactItem.name.toLowerCase() === name.toLowerCase()\n        )\n      ) {\n        alert(`Oops, ${contact.name} is already in contacts!`);\n        return;\n      }\n      dispatch(addContact({ name, number, id: nanoid() }));\n    };\n    addContacts({ name, number });\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className={css.formContact}>\n      <label>\n        <span>Name</span>\n        <input\n          className={css.formName}\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={handleInputChange}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </label>\n      <label>\n        <span>Number</span>\n        <input\n          className={css.formNumber}\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          onChange={handleInputChange}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </label>\n\n      <button type=\"submit\" className={css.buttonAdd}>\n        Add contact\n      </button>\n    </form>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"contactsContainer\":\"Filter_contactsContainer__+m7aw\",\"inputFilter\":\"Filter_inputFilter__8QMOp\"};","import { useDispatch, useSelector } from 'react-redux';\nimport { addFilter } from '../../redux/filterSlice';\nimport css from './Filter.module.css';\n\nexport function Filter() {\n  const value = useSelector(state => state.filter.filter);\n  const dispatch = useDispatch();\n\n  const onFilterChange = ({ target: { value } }) => {\n    dispatch(addFilter(value));\n  };\n\n  return (\n    <div className={css.contactsContainer}>\n      <p className={css.text}>Find contacts by name</p>\n      <input\n        className={css.inputFilter}\n        type=\"text\"\n        name=\"filter\"\n        value={value}\n        onChange={onFilterChange}\n      />\n    </div>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"contactList\":\"ContactList_contactList__UFVCg\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"ContactListItem_item__UAAix\",\"buttonDelete\":\"ContactListItem_buttonDelete__965SC\"};","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { deleteContacts } from '../../redux/operation';\nimport css from './ContactListItem.module.css';\n\nexport function ContactListItem({ name, number, buttonId }) {\n  const dispatch = useDispatch();\n  const handleDeleteContacts = event => {\n    dispatch(deleteContacts(event.target.id));\n  };\n\n  return (\n    <ul className={css.list}>\n      <li className={css.item}>\n        {name}: <span>{number}</span>\n        <button\n          id={buttonId}\n          onClick={handleDeleteContacts}\n          className={css.buttonDelete}\n        >\n          Delete\n        </button>\n      </li>\n    </ul>\n  );\n}\n\nContactListItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","import css from './ContactList.module.css';\nimport { ContactListItem } from '../ContactListItem/ContactListItem';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getFilterContacts } from '../../redux/selectors';\nimport { getContacts } from '../../redux/operation';\n\nexport function ContactList() {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(getContacts());\n  }, [dispatch]);\n\n  const filteredContacts = useSelector(getFilterContacts);\n\n  return (\n    <ul className={css.contactList}>\n      {filteredContacts.map(({ id, name, number }) => (\n        <ContactListItem key={id} name={name} number={number} buttonId={id} />\n      ))}\n    </ul>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"phonebook\":\"ContactsPage_phonebook__WuvDn\",\"contacts\":\"ContactsPage_contacts__soBmU\"};","import React from 'react';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { Filter } from 'components/Filter/Filter';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Outlet } from 'react-router-dom';\nimport css from './ContactsPage.module.css';\nexport default function ContactsPage() {\n  return (\n    <div>\n      <h1 className={css.phonebook}>Phonebook</h1>\n      <ContactForm />\n      <h2 className={css.contacts}>Contacts</h2>\n      <Filter />\n      <ContactList />\n      <Outlet />\n    </div>\n  );\n}\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectFilter = state => state.filter;\nexport const selectToken = state => state.auth.token;\nexport const selectUserEmail = state => state.auth.email;\n\nexport const getFilterContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().trim().includes(filter.toLowerCase())\n    );\n  }\n);\n"],"names":["nanoid","size","arguments","length","undefined","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","ContactForm","_useState","useState","_useState2","_slicedToArray","name","setName","_useState3","_useState4","number","setNumber","contacts","useSelector","selectContacts","dispatch","useDispatch","handleInputChange","event","_event$target","target","value","_jsxs","onSubmit","preventDefault","contact","some","contactItem","toLowerCase","alert","concat","addContact","className","css","children","_jsx","type","onChange","pattern","title","required","Filter","state","filter","_ref","addFilter","ContactListItem","buttonId","onClick","deleteContacts","ContactList","useEffect","getContacts","filteredContacts","getFilterContacts","map","ContactsPage","Outlet","items","selectToken","auth","token","selectUserEmail","email","createSelector","trim","includes"],"sourceRoot":""}